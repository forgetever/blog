[ 2016-04-04T09:31:29+08:00 ] ::1 /blog/themes/myblog/Public/css/bootstrap.css.map
ERR: 无法加载控制器:Themes

[ 2016-04-04T10:36:29+08:00 ] ::1 /blog/index.php?g=Portal&m=AdminPost&a=index&menuid=7
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

[ 2016-04-04T10:36:32+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=add&term=
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

[ 2016-04-04T10:37:36+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=add_post
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.001000s ]
INFO: Run Behavior\CheckLangBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.002000s ]
SQL: SHOW COLUMNS FROM `blog_users` [ RunTime:0.0100s ]
SQL: SELECT * FROM `blog_users` WHERE ( id=1 ) LIMIT 1   [ RunTime:0.0010s ]
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel
SQL: SHOW COLUMNS FROM `blog_posts` [ RunTime:0.0080s ]
SQL: SHOW COLUMNS FROM `blog_terms` [ RunTime:0.0090s ]
SQL: SHOW COLUMNS FROM `blog_term_relationships` [ RunTime:0.0050s ]
SQL: INSERT INTO `blog_posts` (`post_title`,`post_keywords`,`post_source`,`post_excerpt`,`post_modified`,`post_status`,`istop`,`recommended`,`post_content`,`post_date`,`post_author`,`smeta`) VALUES ('上线啦！','','','博客上线','2016-04-04 10:36:32','1','0','0','<p>blog终于上线啦，希望大家多多捧场。。。现在功能简单，以后会不断完善</p>','2016-04-04 10:37:36','1','{\"thumb\":\"\"}') [ RunTime:0.0010s ]
SQL: INSERT INTO `blog_term_relationships` (`term_id`,`object_id`) VALUES ('7','2') [ RunTime:0.0010s ]

[ 2016-04-04T10:37:39+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=index
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

[ 2016-04-04T10:48:14+08:00 ] ::1 /blog/themes/myblog/Public/css/bootstrap.css.map
ERR: 无法加载控制器:Themes

[ 2016-04-04T10:48:28+08:00 ] ::1 /blog/themes/myblog/Public/css/bootstrap.css.map
ERR: 无法加载控制器:Themes

[ 2016-04-04T10:49:00+08:00 ] ::1 /blog/themes/myblog/Public/css/bootstrap.css.map
ERR: 无法加载控制器:Themes

[ 2016-04-04T12:03:57+08:00 ] ::1 /blog/index.php?g=Portal&m=AdminPost&a=index&menuid=7
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

[ 2016-04-04T12:03:59+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=add&term=
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

[ 2016-04-04T12:06:40+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=add_post
INFO: [ app_begin ] --START--
INFO: Run Behavior\ReadHtmlCacheBehavior [ RunTime:0.000000s ]
INFO: Run Behavior\CheckLangBehavior [ RunTime:0.001000s ]
INFO: [ app_begin ] --END-- [ RunTime:0.001000s ]
SQL: SHOW COLUMNS FROM `blog_users` [ RunTime:0.0070s ]
SQL: SELECT * FROM `blog_users` WHERE ( id=1 ) LIMIT 1   [ RunTime:0.0010s ]
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel
SQL: SHOW COLUMNS FROM `blog_posts` [ RunTime:0.0060s ]
SQL: SHOW COLUMNS FROM `blog_terms` [ RunTime:0.0060s ]
SQL: SHOW COLUMNS FROM `blog_term_relationships` [ RunTime:0.0050s ]
SQL: INSERT INTO `blog_posts` (`post_title`,`post_keywords`,`post_source`,`post_excerpt`,`post_modified`,`post_status`,`istop`,`recommended`,`post_content`,`post_date`,`post_author`,`smeta`) VALUES ('Java关键字final、static使用总结','Java final static','http://lavasoft.blog.51cto.com/62575/18771/','Java关键字final、static使用总结','2016-04-04 12:03:59','1','0','0','<p><span style=\"color:#ff0000;font-size:18px;padding: 0px; margin: 0px;\"><strong style=\"padding: 0px; margin: 0px;\">Java关键字final、static使用总结</strong></span></p><p><span style=\"font-size:12px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:12px;padding: 0px; margin: 0px;\"><strong style=\"padding: 0px; margin: 0px;\"><span style=\"color:#ff0000;font-size:16px;padding: 0px; margin: 0px;\">一、final</span></strong><br style=\"padding: 0px; margin: 0px;\"/></span><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 根据程序上下文环境，Java关键字final有“这是无法改变的”或者“终态的”含义，它可以修饰非抽象类、非抽象类成员方法和变量。你可能出于两种理解而需要阻止改变：设计或效率。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final类不能被继承，没有子类，final类中的方法默认是final的。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final方法不能被子类的方法覆盖，但可以被继承。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final成员变量表示常量，只能被赋值一次，赋值后值不再改变。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final不能用于修饰构造方法。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注意：父类的private成员方法是不能被子类方法覆盖的，因此private类型的方法默认是final类型的。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">1、final类<br style=\"padding: 0px; margin: 0px;\"/></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final类不能被继承，因此final类的成员方法没有机会被覆盖，默认都是final的。在设计类时候，如果这个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会载被扩展，那么就设计为final类。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">2、final方法<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 如果一个类不允许其子类覆盖某个方法，则可以把这个方法声明为final方法。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使用final方法的原因有二：<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一、把方法锁定，防止任何继承类修改它的意义和实现。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二、高效。编译器在遇到调用final方法时候会转入内嵌机制，大大提高执行效率。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 例如：<br style=\"padding: 0px; margin: 0px;\"/></span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span></p><p><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;Test1 {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String[] args) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">// TODO 自动生成方法存根&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f1() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;f1&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#008000;padding: 0px; margin: 0px;\">//无法被子类覆盖的方法&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f2() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;f2&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f3() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;f3&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f4() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;f4&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;Test2&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">extends</span>&nbsp;Test1 {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f1(){&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;Test1父类方法f1被覆盖!&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String[] args) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;Test2 t=<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test2();&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;t.f1();&nbsp;&nbsp;&nbsp;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;t.f2();&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//调用从父类继承过来的final方法&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;t.f3();&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//调用从父类继承过来的方法&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//t.f4(); //调用失败，无法从父类继承获得&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}</p><p></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">3、final变量（常量）<br style=\"padding: 0px; margin: 0px;\"/></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用final修饰的成员变量表示常量，值一旦给定就无法改变！<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; final修饰的变量有三种：静态变量、实例变量和局部变量，分别表示三种类型的常量。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 从下面的例子中可以看出，一旦给final变量初值后，值就不能再改变了。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外，final变量定义的时候，可以先声明，而不给初值，这中变量也称为final空白，无论什么情况，编译器都确保空白final在使用之前必须被初始化。但是，final空白在final关键字final的使用上提供了更大的灵活性，为此，一个类中的final数据成员就可以实现依对象而有所不同，却有保持其恒定不变的特征。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">package</span>&nbsp;org.leizhimin;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;Test3 {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;String S =&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>实例变量S&quot;</span>;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;A = 100;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;B = 90;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;C = 80;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;D = 70;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;E;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//final空白,必须在初始化对象的时候赋初值&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;Test3(<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;x) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;E = x;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">/**&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; * @param args&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */</span>&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String[] args) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test3 t =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test3(2);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//t.A=101;&nbsp;&nbsp;&nbsp;&nbsp;//出错,final变量的值一旦给定就无法改变&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//t.B=91; //出错,final变量的值一旦给定就无法改变&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//t.C=81; //出错,final变量的值一旦给定就无法改变&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//t.D=71; //出错,final变量的值一旦给定就无法改变&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.A);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.B);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.C);&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//不推荐用对象方式访问静态字段&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.D);&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//不推荐用对象方式访问静态字段&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Test3.C);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Test3.D);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//System.out.println(Test3.E); //出错,因为E为final空白,依据不同对象值有所不同.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.E);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test3 t1 =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test3(3);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t1.E);&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//final空白变量E依据对象的不同而不同&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;test() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test3(1).A);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Test3.C);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(Test3.D);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;test2() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//final空白,在需要的时候才赋值&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;b = 4;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//局部常量--final用于局部变量的情形&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;c;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//final空白,一直没有给赋值.&nbsp;&nbsp;&nbsp;&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = 3;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//a=4;&nbsp;&nbsp;&nbsp;&nbsp;出错,已经给赋过值了.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//b=2; 出错,已经给赋过值了.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">4、final参数</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 当函数参数为final类型时，你可以读取使用该参数，但是无法改变该参数的值。<br style=\"padding: 0px; margin: 0px;\"/></span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px; color: rgb(85, 85, 85); font-family: 宋体, &#39;Arial Narrow&#39;, arial, serif; white-space: normal; background-color: rgb(255, 255, 255);\"></span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span><span style=\"font-size:12px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;Test4 {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String[] args) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test4().f1(2);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f1(<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;i) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//i++;&nbsp;&nbsp;&nbsp;&nbsp;//i是final类型的,值不允许改变的.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.print(i);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}</p><p><br style=\"padding: 0px; margin: 0px;\"/><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><strong style=\"padding: 0px; margin: 0px;\"><span style=\"color:#ff0000;padding: 0px; margin: 0px;\">二、static</span></strong></span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><strong style=\"padding: 0px; margin: 0px;\"><span style=\"color:#ff0000;padding: 0px; margin: 0px;\"><br style=\"padding: 0px; margin: 0px;\"/></span></strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static表示“全局”或者“静态”的意思，用来修饰成员变量和成员方法，也可以形成静态static代码块，但是Java语言中没有全局变量的概念。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#ff0000;padding: 0px; margin: 0px;\">被static修饰的成员变量和成员方法独立于该类的任何对象。</span>也就是说，它不依赖类特定的实例，被类的所有实例共享。只要这个类被加载，Java虚拟机就能根据类名在运行时数据区的方法区内定找到他们。因此，static对象可以在它的任何对象创建之前访问，无需引用任何对象。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#ff1493;padding: 0px; margin: 0px;\">用public修饰的static成员变量和成员方法本质是全局变量和全局方法，当声明它类的对象市，不生成static变量的副本，而是类的所有实例共享同一个static变量。</span></span></p><p><span style=\"color:#ff1493;font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static变量前可以有private修饰，表示这个变量可以在类的静态代码块中，或者类的其他静态成员方法中使用（当然也可以在非静态成员方法中使用--废话），但是不能在其他类中通过类名来直接引用，这一点很重要。</span>实际上你需要搞明白，<span style=\"color:#ff1493;padding: 0px; margin: 0px;\">private是访问权限限定，static表示不要实例化就可以使用</span>，这样就容易理解多了。static前面加上其它访问权限关键字的效果也以此类推。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static修饰的成员变量和成员方法习惯上称为静态变量和静态方法，可以直接通过类名来访问，访问语法为：<br style=\"padding: 0px; margin: 0px;\"/>类名.静态方法名(参数列表...)&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>类名.静态变量名</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 用static修饰的代码块表示静态代码块，当Java虚拟机（JVM）加载类时，就会执行该代码块（用处非常大，呵呵）。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">1、static变量<br style=\"padding: 0px; margin: 0px;\"/></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 按照是否静态的对类成员变量进行分类可分两种：一种是被static修饰的变量，叫静态变量或类变量；另一种是没有被static修饰的变量，叫实例变量。两者的区别是：<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于静态变量在内存中只有一个拷贝（节省内存），JVM只为静态分配一次内存，在加载类的过程中完成静态变量的内存分配，可用类名直接访问（方便），当然也可以通过对象来访问（但是这是不推荐的）。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于实例变量，没创建一个实例，就会为实例变量分配一次内存，实例变量可以在内存中有多个拷贝，互不影响（灵活）。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\"></span></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">2、静态方法<br style=\"padding: 0px; margin: 0px;\"/></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 静态方法可以直接通过类名调用，任何的实例也都可以调用，因此静态方法中不能用this和super关键字，不能直接访问所属类的实例变量和实例方法(就是不带static的成员变量和成员成员方法)，只能访问所属类的静态成员变量和成员方法。因为实例成员与特定的对象关联！这个需要去理解，想明白其中的道理，不是记忆！！！<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 因为static方法独立于任何实例，因此static方法必须被实现，而不能是抽象的abstract。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\"></span></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">3、static代码块</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static代码块也叫静态代码块，是在类中独立于类成员的static语句块，可以有多个，位置可以随便放，它不在任何的方法体内，JVM加载类时会执行这些静态的代码块，如果static代码块有多个，JVM将按照它们在类中出现的先后顺序依次执行它们，每个代码块只会被执行一次。例如：<br style=\"padding: 0px; margin: 0px;\"/></span></p><p><span style=\"font-size:12px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:12px;padding: 0px; margin: 0px;\"></span></p><p><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;Test5 {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;a;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;b;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;{&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test5.a = 3;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test5 t =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Test5();&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.f();&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.b = 1000;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(t.b);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;{&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test5.a = 4;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String[] args) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">// TODO 自动生成方法存根&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;{&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Test5.a = 5;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(a);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;f() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;hhahhahah&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}</p><p></p><p>&nbsp;</p><p><span style=\"font-size:12px;padding: 0px; margin: 0px;\">运行结果：<br style=\"padding: 0px; margin: 0px;\"/><span style=\"color:#f0ffff;padding: 0px; margin: 0px; background-color: rgb(0, 0, 0);\">3<br style=\"padding: 0px; margin: 0px;\"/>hhahhahah<br style=\"padding: 0px; margin: 0px;\"/>1000<br style=\"padding: 0px; margin: 0px;\"/>4<br style=\"padding: 0px; margin: 0px;\"/>5</span></span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 利用静态代码块可以对一些static变量进行赋值，最后再看一眼这些例子，都一个static的main方法，这样JVM在运行main方法的时候可以直接调用而不用创建实例。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">4、static和final一块用表示什么</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; static final用来修饰成员变量和成员方法，可简单理解为“全局常量”！<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于变量，表示一旦给值就不可修改，并且通过类名可以访问。<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于方法，表示不可覆盖，并且可以通过类名直接访问。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 特别要注意一个问题：</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 对于被static和final修饰过的实例常量，实例本身不能再改变了，但对于一些容器类型（比如，ArrayList、HashMap）的实例变量，不可以改变容器变量本身，但可以修改容器中存放的对象，这一点在编程中用到很多。</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 也许说了这么多，反倒把你搞晕了，还是看个例子吧：</span></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span></p><p><span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">class</span>&nbsp;TestStaticFinal {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;String strStaticFinalVar =&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;aaa&quot;</span>;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;String strStaticVar =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">null</span>;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;String strFinalVar =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">null</span>;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">int</span>&nbsp;intStaticFinalVar = 0;&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;Integer integerStaticFinalVar =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;Integer(8);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">final</span>&nbsp;ArrayList&lt;String&gt; alStaticFinalVar =&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;ArrayList&lt;String&gt;();&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">private</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;test() {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;-------------值处理前----------\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strStaticFinalVar=&quot;</span>&nbsp;+ strStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strStaticVar=&quot;</span>&nbsp;+ strStaticVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strFinalVar=&quot;</span>&nbsp;+ strFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;intStaticFinalVar=&quot;</span>&nbsp;+ intStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;integerStaticFinalVar=&quot;</span>&nbsp;+ integerStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;alStaticFinalVar=&quot;</span>&nbsp;+ alStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//strStaticFinalVar=&quot;哈哈哈哈&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误，final表示终态,不可以改变变量本身.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strStaticVar =&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;哈哈哈哈&quot;</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//正确，static表示类变量,值可以改变.&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//strFinalVar=&quot;呵呵呵呵&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//intStaticFinalVar=2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//integerStaticFinalVar=new Integer(8);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//错误, final表示终态，在定义的时候就要初值（哪怕给个null），一旦给定后就不可再更改。&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alStaticFinalVar.add(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;aaa&quot;</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alStaticFinalVar.add(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;bbb&quot;</span>);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#008000;padding: 0px; margin: 0px;\">//正确，容器变量本身没有变化，但存放内容发生了变化。这个规则是非常常用的，有很多用途。&nbsp;</span><br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;-------------值处理后----------\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strStaticFinalVar=&quot;</span>&nbsp;+ strStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strStaticVar=&quot;</span>&nbsp;+ strStaticVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;strFinalVar=&quot;</span>&nbsp;+ strFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;intStaticFinalVar=&quot;</span>&nbsp;+ intStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;integerStaticFinalVar=&quot;</span>&nbsp;+ integerStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;alStaticFinalVar=&quot;</span>&nbsp;+ alStaticFinalVar +&nbsp;<span style=\"color:#800000;padding: 0px; margin: 0px;\">&quot;\\r\\n&quot;</span>);&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/><br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">public</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">static</span>&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">void</span>&nbsp;main(String args[]) {&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=\"color:#0000ff;padding: 0px; margin: 0px;\">new</span>&nbsp;TestStaticFinal().test();&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br style=\"padding: 0px; margin: 0px;\"/>}</p><p></p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">运行结果如下：</span></p><p>-------------值处理前----------</p><p>strStaticFinalVar=aaa</p><p>strStaticVar=null</p><p>strFinalVar=null</p><p>intStaticFinalVar=0</p><p>integerStaticFinalVar=8</p><p>alStaticFinalVar=[]</p><p>-------------值处理后----------</p><p>strStaticFinalVar=aaa</p><p>strStaticVar=哈哈哈哈</p><p>strFinalVar=null</p><p>intStaticFinalVar=0</p><p>integerStaticFinalVar=8</p><p>alStaticFinalVar=[aaa, bbb]</p><p><br style=\"padding: 0px; margin: 0px;\"/>Process finished with exit code 0</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\"></span>&nbsp;</p><p><span style=\"font-size:16px;padding: 0px; margin: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 看了上面这个例子，就清楚很多了，但必须明白：通过static final修饰的容器类型变量中所“装”的对象是可改变的。这是和一般基本类型和类类型变量差别很大的地方。</span></p><p><br/></p>','2016-04-04 12:06:40','1','{\"thumb\":\"20160404\\/5701e84615286.jpg\"}') [ RunTime:0.0040s ]
SQL: INSERT INTO `blog_term_relationships` (`term_id`,`object_id`) VALUES ('13','3') [ RunTime:0.0010s ]

[ 2016-04-04T12:06:43+08:00 ] ::1 /blog/index.php?g=&m=AdminPost&a=index
NOTIC: D方法实例化没找到模型类Portal\Model\PostsModel

